# -*- coding: utf-8 -*-
from __future__ import unicode_literals
"""
Generated by 'django-admin startproject' using Django 1.8.2.
For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from django.contrib import messages
import os
import logging
import pytz
from django.utils import timezone
from django.utils.translation import ugettext_lazy as _
# from django.contrib.sites.models import Site  # it causes circular dependency error

logger = logging.getLogger(__name__)

forbidden_words = []
additional_forbidden_words = ""
try:
    if additional_forbidden_words:
        additional_forbidden_words = additional_forbidden_words.split(",")
        forbidden_words.extend(additional_forbidden_words)
except Exception as e:
    logger.error("%s, additional_forbidden_words can't be read", e)

old_date = timezone.datetime(1954, 06, 07, 00, 00, 00, tzinfo=pytz.utc)

# GEOS_LIBRARY_PATH = 'C:\OSGeo4W\lib\geos_c.lib'
# GEOS_LIBRARY_PATH = GEOS_LIBRARY_PATH.encode('ascii', 'ignore')

logfile_dir = os.path.dirname(os.path.abspath(__file__))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s pr:%(process)d thr:%(thread)d] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'to_console': {
            'format': " >>> [%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': ' >>> [%(name)s:%(lineno)s] %(message)s'
        },
        "rq_console": {
            "format": "%(asctime)s %(message)s",
            "datefmt": "%H:%M:%S",
        },
    },

    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': logfile_dir+'/logfile.log',
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'to_console'
        },
        "rq_console": {
            "level": "DEBUG",
            "class": "rq.utils.ColorizingStreamHandler",
            "formatter": "rq_console",
            "exclude": ["%(asctime)s"],
        },

    },

    'loggers': {
        # This logger logs the default django log messages
        'django': {
            'handlers': ['file', 'console'],
            'propagate': True,
            'level': 'INFO',
        },
        "rq.worker": {
            "handlers": ['file', "rq_console"],
            "level": "DEBUG"
        },
        'zakanda': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'xmlSoccerParser': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'games': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'bet_slip': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'user_accounts': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'bet_statistics': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'feeds': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'gutils': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'bet_tagging': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'avatar_extension': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'emails': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'register_history': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'data_sources': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'sportmonks': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
        },
        'skrill': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
                },
        'wallet': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
                },
        # 'django.db': {
        #     'handlers': ['file', 'console'],
        #     'level': 'DEBUG',
        # }
    }
}


BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# XMLSOCCER API KEY
xmlsoccer_demo = False

# ----------------- EMAILS ------------------ #

# # mailgun
mailgun_domain = 'mg1.zakanda.com'
mailgun_email = 'mailgun' + '@' + mailgun_domain  # the original mailgun email which is the actual sender
mailgun_tips_mail = 'zakbot' + '@' + mailgun_domain  # you change how the sender appears to recipients with the from arg
mailgun_sender_name = 'zakanda'  # the name of the sender as it appears to the recipients

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.mailgun.org'
EMAIL_HOST_USER = 'zakbot' + '@' + mailgun_domain
EMAIL_PORT = 587
DEFAULT_FROM_EMAIL = mailgun_sender_name + ' <' + EMAIL_HOST_USER + '>'

# zoho
# EMAIL_HOST = 'smtp.zoho.com'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'info@zakanda.com'
# EMAIL_HOST_PASSWORD = sensitive_data.zoho_email_password
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = 'info@zakanda.com'


SERVER_EMAIL = DEFAULT_FROM_EMAIL  # This one is used to end mails to admins and managers

# ------------------- END EMAILS --------------------- #
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                # allauth needs the following processor from django
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
TEMPLATES[0]['OPTIONS']['context_processors'].append("zakanda.context_processors.main_processor")

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

INSTALLED_APPS = (
    'redis_cache',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # ------------ 3rd party apps -------------
    'crispy_forms',
    'mathfilters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'djpjax',
    'django_extensions',
    'django_rq',    # contains some optional urls
    # todo now install rq-dashboard
    'actstream',    # contains urls, needs to be first to stream django due to same tag names
    'stream_django',
    'avatar',
    'easy_timezones',
    'storages',
    # 'bulma',  # needed by django_ajax_comments_xtd
    # 'django_ajax_comments_xtd',
    'django_comments_xtd',
    # 'fluent_comments',  # must be before django_comments
    # 'threadedcomments',
    'django_comments',
    'rest_framework',  # currently only used for the comments xtd js plugin
    'multiselectfield',  # currently used only by skrill
    # ------------ my apps ------------
    'games',
    'user_accounts',
    'xmlSoccerParser',
    'bet_slip',
    'bet_statistics',
    'gutils',
    'feeds',
    'bet_tagging',
    'avatar_extension',
    'emails',
    'register_history',
    'data_sources',
    'sportmonks',
    'skrill',
    'wallet',
)

MIDDLEWARE_CLASSES = (
    # 'django.middleware.cache.UpdateCacheMiddleware',    # This must be first on the list (runs during response)
    # 'games.middleware.PickBetsVaryMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'feeds.middleware.StreamTokenMiddleware',
    'zakanda.middleware.PjaxMiddleware',
    'easy_timezones.middleware.EasyTimezoneMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',     # This must be last (runs during request)
)

# CRISPY_TEMPLATE_PACK = 'bootstrap3'
# COMMENTS_APP = 'fluent_comments'
# FLUENT_COMMENTS_USE_EMAIL_NOTIFICATION = True  # email to MANAGERS for every comment

COMMENTS_APP = 'django_comments_xtd'
COMMENTS_XTD_MAX_THREAD_LEVEL = 2
COMMENTS_XTD_LIST_ORDER = ('-thread_id', 'order')  # default is ('thread_id', 'order')
COMMENTS_XTD_CONFIRM_EMAIL = True  # for unauthenticated users
COMMENTS_XTD_SALT = "salt for unauthenticated comments"  # To help obfuscating comments before they are sent for confirmation.
COMMENTS_XTD_FROM_EMAIL = DEFAULT_FROM_EMAIL  # Source mail address used for notifications.
COMMENTS_XTD_CONTACT_EMAIL = "info@zakanda.com"  # Contact mail address to show in messages.
COMMENTS_XTD_APP_MODEL_OPTIONS = {
    'default': {
        'allow_flagging': True,
        'allow_feedback': True,
        'show_feedback': True,
    }
}

MESSAGE_TAGS = {
    messages.ERROR: 'danger'  # so that it matches the bootstrap class and error messages are styled as danger
}

ROOT_URLCONF = 'zakanda.urls'
WSGI_APPLICATION = 'zakanda.wsgi.application'

# CACHE_MIDDLEWARE_SECONDS = 15 * 60  # used by the cache middleware
cache_time = 15 * 60

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGES = [
    ('en', _('English')),
    ('el', _('Greek')),
]
LOCALE_PATHS = (
    BASE_DIR + '/templates/locale',
)

LANGUAGE_CODE = 'en'  # the default one
TIME_ZONE = 'Europe/Athens'
USE_I18N = True
USE_L10N = False  # it modified . to , for Greek
USE_TZ = True


# SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
class SessionKeys():
    stream_notification_token = 'stream_notification_token'
    user_id = '_auth_user_id'
    money_mode = 'money_mode'
    bet_tags = 'bet_tags',
    active_bet_tag_id = 'active_bet_tag_id',
    # selected_bookmaker_name = "selected_bookmaker_name"  # needs to be replaced in the code


class NormalizationMethods():
    unit = 'Unit'
    percent = 'Percent'


class Dummies():
    # If a dummy entity must be related with a source, this source will be a dummy source and
    # the sid of the dummy entity in the dummy source would be 1. A duumy bookmkaer for example
    # will be connected only with one source, the dummy source and its sid would be 1.
    name = 'dummy'
    sid = 1


class GetParams():
    normalized = 'normalized=On'

SITE_ID = 1

GEOIP_DATABASE = os.path.join(BASE_DIR, "zakanda/GeoLiteCity.dat")
GEOIPV6_DATABASE = os.path.join(BASE_DIR, "zakanda/GeoLiteCityv6.dat")
# GEOIP_DATABASE = static('geoip/GeoLiteCity.dat')
# print(GEOIP_DATABASE)

# ---------------- django_stream ----------------
STREAM_LOCATION = 'eu-central'
STREAM_USER_FEED = 'user'
STREAM_USER_PRIVATE_FEED = 'user_private'
STREAM_BET_GROUP_FEED = 'bet_group'
STREAM_NEWS_FEEDS = {'timeline': 'timeline', 'timeline_aggregated': 'timeline_aggregated'}
STREAM_NOTIFICATION_FEED = 'notification'


class FeedNames():
    # have in mind that javascript might also use some of the feed names
    user_private = STREAM_USER_PRIVATE_FEED
    user = STREAM_USER_FEED  # this is the public user feed
    bet_group = STREAM_BET_GROUP_FEED
    timeline = STREAM_NEWS_FEEDS['timeline']
    timeline_aggregated = STREAM_NEWS_FEEDS['timeline_aggregated']
    notification = STREAM_NOTIFICATION_FEED


# LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'  # / alone means redirect to referrer, I add port 8000


# ---------------- allauth settings ----------------
# ACCOUNT_LOGOUT_REDIRECT_URL (='/')
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# Eliminate need to provide username, as it's a very old practice
# ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
# Default behaviour (False) is not log users in but redirect them to ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# True to always remember
# ACCOUNT_SESSION_REMEMBER (=None)
# The default behaviour is to redirect authenticated users to ACCOUNT_LOGIN_REDIRECT_URL when they try accessing login/signup pages
# ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS(=True)


# ---------------- django-avatar settings ----------------
AVATAR_MAX_SIZE = 1024 * 1024  # 1MB
AVATAR_GRAVATAR_BACKUP = False
AVATAR_FACEBOOK_BACKUP = False
AVATAR_DEFAULT_URL = "img/default_profile_picture.jpg"
AVATAR_AUTO_GENERATE_SIZES = (20, 30, 80, 160)
# AVATAR_ADD_TEMPLATE  # avatar/add.html
# AVATAR_CHANGE_TEMPLATE  # avatar/change.html
# AVATAR_DELETE_TEMPLATE  # avatar/avatar/confirm_delete.html


# ---------------- SKRILL settings ----------------
SKRILL_API_URL = "https://www.skrill.com/app/pay.pl"
SKRILL_API_REFUND_URL = "https://www.skrill.com/app/refund.pl"
SKRILL_MQI_URL = "https://www.skrill.com/app/query.pl"
SKRILL_QUICK_CHECKOUT_URL = "https://pay.skrill.com"
SKRILL_REFUND_URL = "quest to the following URL: https://www.skrill.com/app/refund.pl"
# optional default settings
SKRILL_RECIPIENT_DESCRIPTION = 'Zakanda Test'
# SKRILL_LOGO_URL = "img/logo_01.png"
SKRILL_RETURN_URL_TEXT = 'Return to zakanda'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
# By default, staticfiles will look for files within the static/ directory of each installed app, as well as in
# directories defined in STATICFILES_DIRS.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

ISO3166_A3 = (
    ('AFG', 'Afghanistan'),
    ('ALA', 'Åland Islands'),
    ('ALB', 'Albania'),
    ('DZA', 'Algeria'),
    ('ASM', 'American Samoa'),
    ('AND', 'Andorra'),
    ('AGO', 'Angola'),
    ('AIA', 'Anguilla'),
    ('ATA', 'Antarctica'),
    ('ATG', 'Antigua and Barbuda'),
    ('ARG', 'Argentina'),
    ('ARM', 'Armenia'),
    ('ABW', 'Aruba'),
    ('AUS', 'Australia'),
    ('AUT', 'Austria'),
    ('AZE', 'Azerbaijan'),
    ('BHS', 'Bahamas, The'),
    ('BHR', 'Bahrain'),
    ('BGD', 'Bangladesh'),
    ('BRB', 'Barbados'),
    ('BLR', 'Belarus'),
    ('BEL', 'Belgium'),
    ('BLZ', 'Belize'),
    ('BEN', 'Benin'),
    ('BMU', 'Bermuda'),
    ('BTN', 'Bhutan'),
    ('BOL', 'Bolivia'),
    ('BIH', 'Bosnia and Herzegovina'),
    ('BWA', 'Botswana'),
    ('BVT', 'Bouvet Island'),
    ('BRA', 'Brazil'),
    ('IOT', 'British Indian Ocean Territory'),
    ('VGB', 'British Virgin Islands'),
    ('BRN', 'Brunei'),
    ('BGR', 'Bulgaria'),
    ('BFA', 'Burkina Faso'),
    ('MMR', 'Burma'),
    ('BDI', 'Burundi'),
    ('KHM', 'Cambodia'),
    ('CMR', 'Cameroon'),
    ('CAN', 'Canada'),
    ('CPV', 'Cape Verde'),
    ('CYM', 'Cayman Islands'),
    ('CAF', 'Central African Republic'),
    ('TCD', 'Chad'),
    ('CHL', 'Chile'),
    ('CHN', 'China'),
    ('CXR', 'Christmas Island'),
    ('CCK', 'Cocos (Keeling) Islands'),
    ('COL', 'Colombia'),
    ('COM', 'Comoros'),
    ('COD', 'Congo, Democratic Republic of the'),
    ('COG', 'Congo, Republic of the'),
    ('COK', 'Cook Islands'),
    ('CRI', 'Costa Rica'),
    ('CIV', "Cote d'Ivoire"),
    ('HRV', 'Croatia'),
    ('CUB', 'Cuba'),
    ('CYP', 'Cyprus'),
    ('CZE', 'Czech Republic'),
    ('DNK', 'Denmark'),
    ('DJI', 'Djibouti'),
    ('DMA', 'Dominica'),
    ('DOM', 'Dominican Republic'),
    ('ECU', 'Ecuador'),
    ('EGY', 'Egypt'),
    ('SLV', 'El Salvador'),
    ('GNQ', 'Equatorial Guinea'),
    ('ERI', 'Eritrea'),
    ('EST', 'Estonia'),
    ('ETH', 'Ethiopia'),
    ('FLK', 'Falkland Islands (Islas Malvinas)'),
    ('FRO', 'Faroe Islands'),
    ('FJI', 'Fiji'),
    ('FIN', 'Finland'),
    ('FRA', 'France'),
    ('GUF', 'French Guiana'),
    ('PYF', 'French Polynesia'),
    ('ATF', 'French Southern and Antarctic Lands'),
    ('GAB', 'Gabon'),
    ('GMB', 'Gambia, The'),
    ('PSE', 'Gaza Strip'),
    ('GEO', 'Georgia'),
    ('DEU', 'Germany'),
    ('GHA', 'Ghana'),
    ('GIB', 'Gibraltar'),
    ('GRC', 'Greece'),
    ('GRL', 'Greenland'),
    ('GRD', 'Grenada'),
    ('GLP', 'Guadeloupe'),
    ('GUM', 'Guam'),
    ('GTM', 'Guatemala'),
    ('GGY', 'Guernsey'),
    ('GIN', 'Guinea'),
    ('GNB', 'GuineaBissau'),
    ('GUY', 'Guyana'),
    ('HTI', 'Haiti'),
    ('HMD', 'Heard Island and McDonald Islands'),
    ('VAT', 'Holy See (Vatican City)'),
    ('HND', 'Honduras'),
    ('HKG', 'Hong Kong'),
    ('HUN', 'Hungary'),
    ('ISL', 'Iceland'),
    ('IND', 'India'),
    ('IDN', 'Indonesia'),
    ('IRN', 'Iran'),
    ('IRQ', 'Iraq'),
    ('IRL', 'Ireland'),
    ('IMN', 'Isle of Man'),
    ('ISR', 'Israel'),
    ('ITA', 'Italy'),
    ('JAM', 'Jamaica'),
    ('JPN', 'Japan'),
    ('JEY', 'Jersey'),
    ('JOR', 'Jordan'),
    ('KAZ', 'Kazakhstan'),
    ('KEN', 'Kenya'),
    ('KIR', 'Kiribati'),
    ('PRK', 'Korea, North'),
    ('KOR', 'Korea, South'),
    ('KWT', 'Kuwait'),
    ('KGZ', 'Kyrgyzstan'),
    ('LAO', 'Laos'),
    ('LVA', 'Latvia'),
    ('LBN', 'Lebanon'),
    ('LSO', 'Lesotho'),
    ('LBR', 'Liberia'),
    ('LBY', 'Libya'),
    ('LIE', 'Liechtenstein'),
    ('LTU', 'Lithuania'),
    ('LUX', 'Luxembourg'),
    ('MAC', 'Macau'),
    ('MKD', 'Macedonia'),
    ('MDG', 'Madagascar'),
    ('MWI', 'Malawi'),
    ('MYS', 'Malaysia'),
    ('MDV', 'Maldives'),
    ('MLI', 'Mali'),
    ('MLT', 'Malta'),
    ('MHL', 'Marshall Islands'),
    ('MTQ', 'Martinique'),
    ('MRT', 'Mauritania'),
    ('MUS', 'Mauritius'),
    ('MYT', 'Mayotte'),
    ('MEX', 'Mexico'),
    ('FSM', 'Micronesia, Federated States of'),
    ('MDA', 'Moldova'),
    ('MCO', 'Monaco'),
    ('MNG', 'Mongolia'),
    ('MNE', 'Montenegro'),
    ('MSR', 'Montserrat'),
    ('MAR', 'Morocco'),
    ('MOZ', 'Mozambique'),
    ('NAM', 'Namibia'),
    ('NRU', 'Nauru'),
    ('NPL', 'Nepal'),
    ('NLD', 'Netherlands'),
    ('ANT', 'Netherlands Antilles'),
    ('NCL', 'New Caledonia'),
    ('NZL', 'New Zealand'),
    ('NIC', 'Nicaragua'),
    ('NER', 'Niger'),
    ('NGA', 'Nigeria'),
    ('NIU', 'Niue'),
    ('NFK', 'Norfolk Island'),
    ('MNP', 'Northern Mariana Islands'),
    ('NOR', 'Norway'),
    ('OMN', 'Oman'),
    ('PAK', 'Pakistan'),
    ('PLW', 'Palau'),
    ('PAN', 'Panama'),
    ('PNG', 'Papua New Guinea'),
    ('PRY', 'Paraguay'),
    ('PER', 'Peru'),
    ('PHL', 'Philippines'),
    ('PCN', 'Pitcairn Islands'),
    ('POL', 'Poland'),
    ('PRT', 'Portugal'),
    ('PRI', 'Puerto Rico'),
    ('QAT', 'Qatar'),
    ('REU', 'Reunion'),
    ('ROU', 'Romania'),
    ('RUS', 'Russia'),
    ('RWA', 'Rwanda'),
    ('BLM', 'Saint Barthelemy'),
    ('SHN', 'Saint Helena'),
    ('KNA', 'Saint Kitts and Nevis'),
    ('LCA', 'Saint Lucia'),
    ('MAF', 'Saint Martin'),
    ('SPM', 'Saint Pierre and Miquelon'),
    ('VCT', 'Saint Vincent and the Grenadines'),
    ('WSM', 'Samoa'),
    ('SMR', 'San Marino'),
    ('STP', 'Sao Tome and Principe'),
    ('SAU', 'Saudi Arabia'),
    ('SEN', 'Senegal'),
    ('SRB', 'Serbia'),
    ('SYC', 'Seychelles'),
    ('SLE', 'Sierra Leone'),
    ('SGP', 'Singapore'),
    ('SVK', 'Slovakia'),
    ('SVN', 'Slovenia'),
    ('SLB', 'Solomon Islands'),
    ('SOM', 'Somalia'),
    ('ZAF', 'South Africa'),
    ('SGS', 'South Georgia and the South Sandwich Islands'),
    ('ESP', 'Spain'),
    ('LKA', 'Sri Lanka'),
    ('SDN', 'Sudan'),
    ('SUR', 'Suriname'),
    ('SJM', 'Svalbard'),
    ('SWZ', 'Swaziland'),
    ('SWE', 'Sweden'),
    ('CHE', 'Switzerland'),
    ('SYR', 'Syria'),
    ('TWN', 'Taiwan'),
    ('TJK', 'Tajikistan'),
    ('TZA', 'Tanzania'),
    ('THA', 'Thailand'),
    ('TLS', 'TimorLeste'),
    ('TGO', 'Togo'),
    ('TKL', 'Tokelau'),
    ('TON', 'Tonga'),
    ('TTO', 'Trinidad and Tobago'),
    ('TUN', 'Tunisia'),
    ('TUR', 'Turkey'),
    ('TKM', 'Turkmenistan'),
    ('TCA', 'Turks and Caicos Islands'),
    ('TUV', 'Tuvalu'),
    ('UGA', 'Uganda'),
    ('UKR', 'Ukraine'),
    ('ARE', 'United Arab Emirates'),
    ('GBR', 'United Kingdom'),
    ('USA', 'United States'),
    ('UMI', 'United States Minor Outlying Islands'),
    ('URY', 'Uruguay'),
    ('UZB', 'Uzbekistan'),
    ('VUT', 'Vanuatu'),
    ('VEN', 'Venezuela'),
    ('VNM', 'Vietnam'),
    ('VIR', 'Virgin Islands'),
    ('WLF', 'Wallis and Futuna'),
    ('PSE', 'West Bank'),
    ('ESH', 'Western Sahara'),
    ('YEM', 'Yemen'),
    ('ZMB', 'Zambia'),
    ('ZWE', 'Zimbabwe'),
)